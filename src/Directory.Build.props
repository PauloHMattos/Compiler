<Project>
    <PropertyGroup>
        <LangVersion>preview</LangVersion>
        <Features>strict</Features>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Properties for code coverage -->
        <CollectCoverage>true</CollectCoverage>
        <CoverletOutputFormat>opencover</CoverletOutputFormat>
        <ExcludeByFile>**/Emitter.cs,**/*Printer.cs,**/*.g.cs,**/*.g.i.cs,**/*.generated.cs</ExcludeByFile>
    </PropertyGroup>

    <ItemGroup>
        <SonarQubeSetting Include="sonar.coverage.exclusions">
            <Value>**/Emitter.cs,**/*Printer.cs,**/*.g.cs,**/*.g.i.cs,**/*.generated.cs</Value>
        </SonarQubeSetting>
    </ItemGroup>

    <!--
    HACK
      VS Code currently doesn't support Roslyn generators (VS does, tho). In
      order to void seeing errors in VS Code and to get IntelliSense, we're
      doing a trick:
      1. The generator writes the file to disk, using the *.g.cs naming
         convention (borrowed from WPF).
      2. In MSBuild we're excluding those files
      Since VS Code (or more specifically OmniSharp) doesn't use MSBuild it will
      still include the file while neither VS nore the CLI/CI build will.
    -->
<!-- 
    <PropertyGroup>
        <GeneratedSources>**/*.g.cs</GeneratedSources>
        <DefaultItemExcludes>$(DefaultItemExcludes);$(GeneratedSources)</DefaultItemExcludes>
    </PropertyGroup> -->
</Project>